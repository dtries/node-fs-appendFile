/* NOTE: We don't need to set up a server to run this example as there is no information coming from the browser in this example. Everything here happens on the within the existing main file (i.e., node-fs-appendFile.js). Just enter "node node-fs-appendFile.js" (without the quotes) in the command line in your terminal to run on instance of fs.appendFile. You can change the second argument (e.g., 'Some text for the file ') to demonstrate that different text is saved dependent upon what appear in the second argument. In useful implementations you would supply this information via a variable. You can delete the .txt file, if one is present, to see how appendFile deals with a specified file that doesn't yet exist. YOU DO NEED SAVE CHANGES MADE TO THE node-fs-appendFile.js FILE AND THEN ENTER "node node-fs-appendFile.js" to run the code again to see how changes are handle. This would be handled by a called function in a typical application.  */


const fs = require('fs'); /* uses node.js built-in file system module */

fs.appendFile('anAppendFile.txt', 'Different Texty Text ', function (err) {  /* appendFile will append the information in the second arguement (in this case 'Some text for the file ' ), to the end of the file specified in the first arguement (in this case 'anAppendFile.txt'). A third options category can be specified before the callback to add optional parameters such as encoding (default is 'utf8' so we didn't set it in this case), modes, and file system flags, this argument is not required. We did not set any options in this example. The fourth item is the callback, here we are check for an error before proceeding to save. As a test, you can use '' instead of 'anAppendFile.txt' to see the effect of an error. NOTE: appendfile will create a new file with the name in the first argument if the file doesn't already exist, any subsequent info will then be appended. */
    if (err) throw err; /* error is output to the terminal, could use console.log(err) as an alternative; using throw err is more typical as it will also stop the current function if no catch block is used; a catch block was not used in this example. */
    console.log('Save Complete!'); /* if no error is encountered the message 'Save Complete!' will be displayed in the terminal */
});